{"ast":null,"code":"var _jsxFileName = \"/Users/youxianhan/Desktop/React_FoodOrder/src/StoreContext/CartProvider.js\",\n    _s = $RefreshSig$();\n\n// this component is simply to manage the current context of cart data and provide that context to all components that want access to it.\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\"; //reducer function can put outside of component because no interval values of the CartProvider component is needed in reducer.\n//receive a state object and an action automatically by React.\n// The action is dispatched by dispatchCartAction inside the Component\n// state is simply the last state snapshotof the state managed by the reducer func.\n// And then as part of the reducer function,\n// you have to return a new state snapshot.\n//at the begining, the state in cartReducer func is the defaultCartState\n//initial value of the useReducer func\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //     concat here adds adds a new item to an array\n    // but unlike push, it doesn't edit the existing array\n    // but return a new array.\n    //add the new item\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } // if action.type != add, return defaultCartState\n\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  //初始化cartstate作为初始值\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //called by MealItem.js\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/youxianhan/Desktop/React_FoodOrder/src/StoreContext/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA;AACA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA;AACA;AACA;AACA,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AACA,WAAO;AACLX,MAAAA,KAAK,EAAEM,YADF;AAELL,MAAAA,WAAW,EAAEQ;AAFR,KAAP;AAID,GAZoC,CAarC;;;AACA,SAAOV,gBAAP;AACD,CAfD;;AAgBA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCjB,UAAU,CAACI,WAAD,EAAcH,gBAAd,CAAlD,CAF8B,CAG9B;;AACA,QAAMiB,oBAAoB,GAAIR,IAAD,IAAU;AACrCO,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMS,yBAAyB,GAAIC,EAAD,IAAQ;AACxCH,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBa,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMC,WAAW,GAAG;AAClBnB,IAAAA,KAAK,EAAEc,SAAS,CAACd,KADC;AAElBC,IAAAA,WAAW,EAAEa,SAAS,CAACb,WAFL;AAGlBmB,IAAAA,OAAO,EAAEJ,oBAHS;AAIlBK,IAAAA,UAAU,EAAEJ;AAJM,GAApB;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cAA2CN,KAAK,CAACS;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;GAAMV,Y;;KAAAA,Y;AAkBN,eAAeA,YAAf","sourcesContent":["// this component is simply to manage the current context of cart data and provide that context to all components that want access to it.\nimport CartContext from \"./cart-context\"\nimport { useReducer } from \"react\"\n\n//reducer function can put outside of component because no interval values of the CartProvider component is needed in reducer.\n//receive a state object and an action automatically by React.\n\n// The action is dispatched by dispatchCartAction inside the Component\n// state is simply the last state snapshotof the state managed by the reducer func.\n// And then as part of the reducer function,\n// you have to return a new state snapshot.\n//at the begining, the state in cartReducer func is the defaultCartState\n\n//initial value of the useReducer func\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n}\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //     concat here adds adds a new item to an array\n    // but unlike push, it doesn't edit the existing array\n    // but return a new array.\n    //add the new item\n    const updatedItems = state.items.concat(action.item)\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    }\n  }\n  // if action.type != add, return defaultCartState\n  return defaultCartState\n}\nconst CartProvider = (props) => {\n  //初始化cartstate作为初始值\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n  //called by MealItem.js\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item })\n  }\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id })\n  }\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  }\n  return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>\n}\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}