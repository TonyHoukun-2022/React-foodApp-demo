{"ast":null,"code":"var _jsxFileName = \"/Users/youxianhan/Desktop/React_FoodOrder/src/StoreContext/CartProvider.js\",\n    _s = $RefreshSig$();\n\n// this component is simply to manage the current context of cart data and provide that context to all components that want access to it.\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\"; //reducer function can put outside of component because no interval values of the CartProvider component is needed in reducer.\n//receive a state object and an action automatically by React.\n// The action is dispatched by dispatchCartAction inside the Component\n// state is simply the last state snapshotof the state managed by the reducer func.\n// And then as part of the reducer function,\n// you have to return a new state snapshot.\n//at the begining, the state in cartReducer func is the defaultCartState\n//initial value of the useReducer func\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //     concat here adds adds a new item to an array\n    // but unlike push, it doesn't edit the existing array\n    // but return a new array.\n    //add the new item\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; // findIndex returns the index of the first array element that matches the condition\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //retreive the existing cart item\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem;\n    let updatedItems; // if there is an existingCartItm\n\n    if (existingCartItem) {\n      //update the cartItem\n      updatedItem = { //copy the properties of existingCartItem, and update the amount\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      }; // copy the existing items of the last state snapshot to a new array updatedItems, so can update the updatedItem without chaning the old array\n\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItem = { ...action.item\n      };\n      updatedItems = state.items.concat(updatedItem);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      //remove the item from cart\n      //all items where the id is not equal to the action.id are kept in a new array upatedItems\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      //decrease the amount of item by 1\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return defaultCartState;\n  }\n};\n\nconst CartProvider = props => {\n  _s();\n\n  //初始化cartstate作为初始值\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //called by MealItem.js\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    //called in MealItem.js\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/youxianhan/Desktop/React_FoodOrder/src/StoreContext/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItems","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA;AACA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA;AACA;AACA;AACA,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA/E,CALyB,CAMzB;;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAuBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAxD,CAA9B,CAPyB,CAQzB;;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;AACA,QAAII,WAAJ;AACA,QAAIC,YAAJ,CAXyB,CAYzB;;AACA,QAAIF,gBAAJ,EAAsB;AACpB;AACAC,MAAAA,WAAW,GAAG,EACZ;AACA,WAAGD,gBAFS;AAGZJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAHlC,OAAd,CAFoB,CAOpB;;AACAM,MAAAA,YAAY,GAAG,CAAC,GAAGZ,KAAK,CAACH,KAAV,CAAf;AACAe,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAsCI,WAAtC;AACD,KAVD,MAUO;AACLA,MAAAA,WAAW,GAAG,EAAE,GAAGV,MAAM,CAACG;AAAZ,OAAd;AACAQ,MAAAA,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBF,WAAnB,CAAf;AACD;;AAED,WAAO;AACLd,MAAAA,KAAK,EAAEe,YADF;AAELd,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAMK,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAuBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EAAnD,CAA9B;AACA,UAAMK,YAAY,GAAGd,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAArB;AACA,UAAMJ,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBgB,YAAY,CAACT,KAA5D;AACA,QAAIO,YAAJ;;AACA,QAAIE,YAAY,CAACR,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACA;AACAM,MAAAA,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYkB,MAAZ,CAAoBX,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EAAhD,CAAf;AACD,KAJD,MAIO;AACL;AACA,YAAME,WAAW,GAAG,EAAE,GAAGG,YAAL;AAAmBR,QAAAA,MAAM,EAAEQ,YAAY,CAACR,MAAb,GAAsB;AAAjD,OAApB;AACAM,MAAAA,YAAY,GAAG,CAAC,GAAGZ,KAAK,CAACH,KAAV,CAAf;AACAe,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAsCI,WAAtC;AACD;;AACD,WAAO;AACLd,MAAAA,KAAK,EAAEe,YADF;AAELd,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAON,gBAAP;AACD;AACF,CAzDD;;AA2DA,MAAMoB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCxB,UAAU,CAACI,WAAD,EAAcH,gBAAd,CAAlD,CAF8B,CAG9B;;AACA,QAAMwB,oBAAoB,GAAIhB,IAAD,IAAU;AACrCe,IAAAA,kBAAkB,CAAC;AAAEjB,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMiB,yBAAyB,GAAIZ,EAAD,IAAQ;AACxCU,IAAAA,kBAAkB,CAAC;AAAEjB,MAAAA,IAAI,EAAE,QAAR;AAAkBO,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMa,WAAW,GAAG;AAClBzB,IAAAA,KAAK,EAAEqB,SAAS,CAACrB,KADC;AAElBC,IAAAA,WAAW,EAAEoB,SAAS,CAACpB,WAFL;AAGlB;AACAyB,IAAAA,OAAO,EAAEH,oBAJS;AAKlBI,IAAAA,UAAU,EAAEH;AALM,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cAA2CL,KAAK,CAACQ;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;GAAMT,Y;;KAAAA,Y;AAmBN,eAAeA,YAAf","sourcesContent":["// this component is simply to manage the current context of cart data and provide that context to all components that want access to it.\nimport CartContext from \"./cart-context\"\nimport { useReducer } from \"react\"\n\n//reducer function can put outside of component because no interval values of the CartProvider component is needed in reducer.\n//receive a state object and an action automatically by React.\n\n// The action is dispatched by dispatchCartAction inside the Component\n// state is simply the last state snapshotof the state managed by the reducer func.\n// And then as part of the reducer function,\n// you have to return a new state snapshot.\n//at the begining, the state in cartReducer func is the defaultCartState\n\n//initial value of the useReducer func\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n}\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //     concat here adds adds a new item to an array\n    // but unlike push, it doesn't edit the existing array\n    // but return a new array.\n    //add the new item\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\n    // findIndex returns the index of the first array element that matches the condition\n    const existingCartItemIndex = state.items.findIndex((item) => item.id === action.item.id)\n    //retreive the existing cart item\n    const existingCartItem = state.items[existingCartItemIndex]\n    let updatedItem\n    let updatedItems\n    // if there is an existingCartItm\n    if (existingCartItem) {\n      //update the cartItem\n      updatedItem = {\n        //copy the properties of existingCartItem, and update the amount\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      }\n      // copy the existing items of the last state snapshot to a new array updatedItems, so can update the updatedItem without chaning the old array\n      updatedItems = [...state.items]\n      updatedItems[existingCartItemIndex] = updatedItem\n    } else {\n      updatedItem = { ...action.item }\n      updatedItems = state.items.concat(updatedItem)\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    }\n  }\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex((item) => item.id === action.id)\n    const existingItem = state.items[existingCartItemIndex]\n    const updatedTotalAmount = state.totalAmount - existingItem.price\n    let updatedItems\n    if (existingItem.amount === 1) {\n      //remove the item from cart\n      //all items where the id is not equal to the action.id are kept in a new array upatedItems\n      updatedItems = state.items.filter((item) => item.id !== action.id)\n    } else {\n      //decrease the amount of item by 1\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 }\n      updatedItems = [...state.items]\n      updatedItems[existingCartItemIndex] = updatedItem\n    }\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    }\n  }\n  if (action.type === \"CLEAR\") {\n    return defaultCartState\n  }\n}\n\nconst CartProvider = (props) => {\n  //初始化cartstate作为初始值\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n  //called by MealItem.js\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item })\n  }\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id })\n  }\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    //called in MealItem.js\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  }\n  return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>\n}\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}