{"ast":null,"code":"var _jsxFileName = \"/Users/youxianhan/Desktop/React_FoodOrder/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport styles from \"./Checkout.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  }); //useRef to validate form inputs after submit\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalInputRef = useRef();\n  const cityInputRef = useRef(); //helper funcs, validation rules\n\n  const notEmpty = value => value.trim() !== '';\n\n  const hasFiveChars = value => value.trim().length === 5;\n\n  const confirmHandler = event => {\n    event.preventDefault(); //read what user have entered when the form is submitted\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostal = postalInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = notEmpty(enteredName);\n    const enteredStreetIsValid = notEmpty(enteredStreet);\n    const enteredCityIsValid = notEmpty(enteredCity);\n    const enteredPostalIsValid = hasFiveChars(enteredPostal); //infer validities as new values for the diff keys in the state obj\n\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalIsValid; //if form is invalid, skip out the onsubmit func, so the funcs of submitting data will not be run\n\n    if (!formIsValid) {\n      return;\n    } //submit cart data\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"postal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.submit,\n        children: \"confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"G5InPLQR+1cPt34AjytpFZq/6hk=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/youxianhan/Desktop/React_FoodOrder/src/components/Cart/Checkout.js"],"names":["useRef","useState","styles","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalInputRef","cityInputRef","notEmpty","value","trim","hasFiveChars","length","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostal","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalIsValid","formIsValid","control","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import {useRef,useState} from 'react'\nimport styles from \"./Checkout.module.css\"\nconst Checkout = (props) => {\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  })\n  //useRef to validate form inputs after submit\n  const nameInputRef = useRef()\n  const streetInputRef = useRef()\n  const postalInputRef = useRef()\n  const cityInputRef = useRef()\n\n  //helper funcs, validation rules\n  const notEmpty = value => value.trim() !== ''\n  const hasFiveChars = value => value.trim().length === 5\n\n  const confirmHandler = (event) => {\n    event.preventDefault()\n    //read what user have entered when the form is submitted\n    const enteredName = nameInputRef.current.value\n    const enteredStreet = streetInputRef.current.value\n    const enteredPostal = postalInputRef.current.value\n    const enteredCity = cityInputRef.current.value\n\n    const enteredNameIsValid = notEmpty(enteredName)\n    const enteredStreetIsValid = notEmpty(enteredStreet)\n    const enteredCityIsValid = notEmpty(enteredCity)\n    const enteredPostalIsValid = hasFiveChars(enteredPostal)\n    \n    //infer validities as new values for the diff keys in the state obj\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalIsValid\n    })\n\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalIsValid\n\n    //if form is invalid, skip out the onsubmit func, so the funcs of submitting data will not be run\n    if (!formIsValid) {\n      return \n    }\n\n    //submit cart data\n\n  }\n\n  return (\n    <form onSubmit={confirmHandler}>\n      <div className={styles.control}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\n        {!formInputsValidity.name && <p>Please enter a valid name</p>}\n      </div>\n      <div className={styles.control}>\n        <label htmlFor=\"street\">Street</label>\n        <input type=\"text\" id=\"street\" ref={ streetInputRef}/>\n      </div>\n      <div className={styles.control}>\n        <label htmlFor=\"postal\">postal</label>\n        <input type=\"text\" id=\"postal\" ref={postalInputRef} />\n      </div>\n      <div className={styles.control}>\n        <label htmlFor=\"city\">city</label>\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\n      </div>\n      <div className={styles.actions}>\n        <button onClick = {props.onCancel}>Cancel</button>\n        <button className={styles.submit}>confirm</button>\n      </div>\n    </form>\n  )\n}\nexport default Checkout\n"]},"metadata":{},"sourceType":"module"}